Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="Texture In Player";>;
SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	float minDist<float uimin=0.0;float uimax=5.0; string uiname="Min Distance";> = 0.5;
	float maxDist<float uimin=0.0;float uimax=5.0; string uiname="Max Distance";> = 1.5;
	float resetMeter<float uimin=0.0;float uimax=100.0;string uiname="Default Distance";> = 0.0;
};

static const float mMult = 65.535f;

bool validDist(float dist) {
	return (dist * mMult > minDist && dist * mMult < maxDist);
}

bool validPlayer(float2 x) {
	float4 c=tex1.Sample(s0,x);
	return (c.r > 0 || c.g > 0 || c.b > 0);
}

float4 pDistance(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	float4 c=tex0.Sample(s0,x);
    if (!validDist(c.r)) c =resetMeter/mMult;
    return c;
}
float4 pPlayer(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
    float4 c=tex0.Sample(s0,x);
	if (!validPlayer(x)) c =resetMeter/mMult;
    return c;
}
float4 pDistPlayer(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
    float4 c=tex0.Sample(s0,x);
	if (!validPlayer(x) || !validDist(c.r)) c =resetMeter/mMult;
    return c;
}

technique10 ThreshDistance{pass P1{SetPixelShader(CompileShader(ps_4_0,pDistance()));}}
technique10 ThreshPlayer{pass P1{SetPixelShader(CompileShader(ps_4_0,pPlayer()));}}
technique10 ThreshDistanceAndPlayer{pass P1{SetPixelShader(CompileShader(ps_4_0,pDistPlayer()));}}